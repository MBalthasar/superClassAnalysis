% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SampleSaturation.R
\name{SampleSaturation}
\alias{SampleSaturation}
\title{Sample Saturation Identification Tool}
\usage{
SampleSaturation(img, model, trainData, valData, prodAcc, classes,
  responseCol, nSamples, overall, plot_graph)
}
\arguments{
\item{img}{A raster file.}

\item{model}{The model which will be used for the classification. See \code{\link[caret]{train}} for model selection.}

\item{trainData}{SpatialPolygonsDataFrame or SpatialPointsDataFrame containing the training locations.}

\item{valData}{SpatialPolygonsDataFrame or SpatialPointsDataFrame containing the validation locations (optional). If no valData is given, the trainData will be split into 70 percent training and 30 percent validation.}

\item{prodAcc}{TRUE or FALSE. If prodAcc is TRUE, the producer accuracy will be returned. If prodAcc is FALSE, the user accuracy will be returned.}

\item{classes}{The column in \code{trainData}, which contains the response variable indicated with the $ sign.}

\item{responseCol}{Character or integer giving the column in \code{trainData}, which contains the response variable.}

\item{nSamples}{A vector containing the number of samples which will be used on the \code{\link[RStoolbox]{superClass}} function.}

\item{overall}{TRUE or FALSE. Defines, whether the overall accuracy should be included or not.}

\item{plot_graph}{TRUE or FALSE. Defines, whether the resulting data.frame should be automatically plotted or not.}
}
\value{
A data.frame with the accuracy numbers per class depending on the sample number.
}
\description{
This function aims to identify the number of samples required per class in order to
get the highest accuracy results from a supervised classicifation.
}
\examples{
library(sp)
library(raster)
library(RStoolbox)
library(reshape2)
library(ggplot2)
library(randomForest)

# Load sample raster file
my_raster <- raster::brick(system.file(package = "superClassAnalysis", "extdata", "landsat_sample.tif"))

# Load sample training and validation data
my_train <- raster::shapefile(system.file(package = "superClassAnalysis", "extdata", "training_sample.shp"))
my_val <- raster::shapefile(system.file(package = "superClassAnalysis", "extdata", "validation_sample.shp"))

# Execute SampleSaturation function
x = SampleSaturation(img = my_raster, model = 'rf', trainData = my_train,
                     valData = my_val, nSamples = c(10, 50, 100, 500),
                     classes = my_train$class_name, responseCol = "class_name",
                     prodAcc = TRUE, overall = TRUE, plot_graph = TRUE)


}
